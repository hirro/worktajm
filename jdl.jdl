#fontSize: 12
#spacing: 150
#padding: 10

/**
 * Billing address for customer or domain.
 */
entity Address {
    /** Organizational number (optional) */
    organizationNumber String,
    addressLine1 String required,
    addressLine2 String
    addressLine3 String,
    city String required,
    zipOrPostcode String required,
    stateProvinceCounty String,
    country String required,
    addressDetails String
}

/**
 * The project associated with a time entry.
 *
 * Each project belongs to either an user or an organization.
 */
entity Project {
    /** Name of the project (required) */
    name String required,
    /** Description of the project (optional) */
    description String,
    /** Hourly rate of the project (optional) */
    hourlyRate Float
}

entity Customer {
    name String required
}

/**
 * The time entry that logs work on a particular project.
 *
 * Each time entry belongs to one user.
 */
entity TimeEntry {
    /** Start time for the time entry (required) */
    start ZonedDateTime required,
    /** End time for the time entry (optional for running tasks) */
    end ZonedDateTime,
    /** Optional comment */
    comment String
}

/**
 * In many cases an organization is only one user.
 */
entity Domain {
    /** Name of the domain (required) */
    name String required
}

/**
 * Additional information for our users (uncommented since it's done manually to avoid interference with generator).
 *
 * entity UserExtra {
 *     phone String
 * }
 *
 */

// Time Entry relationships
relationship ManyToOne {
    /**
     * TimeEntry belongs to one Project.
     * m -> 1 (required)
     */
    TimeEntry{project(name) required} to Project
}
relationship ManyToOne {
    /**
     * TimeEntry belongs to one User.
     * m -> 1 (required)
     */
    TimeEntry{user(email) required} to User
}

// Domain relationships
relationship OneToMany {
    /**
     * 1 -> m (bidirectional)
     * Domain has zero or more customers.
     * Customer belongs to one domain (required).
     */
    Domain{customers(name)} to Customer{domain(name) required}
}
relationship ManyToMany {
    /**
     * m -> m (unidirectional many-to-many)
     * One user can be registered at many domains.
     * Natural order would be User<->Domain but can't extend User.
     */
    Domain{authorizedUsers(email)} to User
}
relationship OneToOne {
    /**
     * 1 -> 1 (unidirectional)
     * Domain has an address (required).
     */
    Domain{address(addressLine1) required} to Address
}

// Customer relationships
relationship OneToMany {
    /**
     * 1 <-> m (bidirectional)
     * Customer has zero or more projects.
     * Project belongs to one customer (required).
     */
    Customer{projects} to Project{customer(name) required}
}
relationship OneToOne {
    /**
     * 1 -> 1 (unidirectional)
     * Domain has one billing address.
     */
    Customer{address(addressLine1) required} to Address
}

// Project relationships
relationship ManyToMany {
    /**
     * m -> m (unidirectional many-to-many)
     * One project may have one or more (global) users.
     * One user (global) may be authorized to register time on zero or more projects.
     * Natural order would be User<->Project but can't extend User.
     * Note: In order to add a user to a project, it should be authorized in the domain.
     */
    Project{projectMembers(email)} to User
}

paginate * with pagination

dto * with mapstruct

